AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for WebSocket Game Backend

Parameters:
  LambdaRoleArn:
    Type: String
    Description: ARN of the Lambda execution role

Resources:
  # Cognito User Pool
  GameUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: GameUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
          RequireLowercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: OFF

  # Cognito User Pool Client
  GameUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: GameAppClient
      UserPoolId: !Ref GameUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # DynamoDB Tables
  GameRoomsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GameRooms
      AttributeDefinitions:
        - AttributeName: roomId
          AttributeType: S
      KeySchema:
        - AttributeName: roomId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  UserStatsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserStats
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Function
  GameBackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GameBackendFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !Ref LambdaRoleArn
      Code:
        S3Bucket: !Sub codebuild-us-east-2-${AWS::AccountId}
        S3Key: latest.zip
      Timeout: 30
      Environment:
        Variables:
          ROOMS_TABLE: GameRooms
          CONNECTIONS_TABLE: Connections
          USERS_TABLE: UserStats
          COGNITO_USER_POOL_ID: !Ref GameUserPool
          REGION: us-east-2
          WEBSOCKET_ENDPOINT: !Sub https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/production
      MemorySize: 128

  # WebSocket API Gateway
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GameWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # API Gateway Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      Name: production
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingRateLimit: 1000
        ThrottlingBurstLimit: 2000

  # Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectIntegration

  JoinRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: joinRoom
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  MakeMoveRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: makeMove
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  LeaveRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: leaveRoom
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  RestartRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: restart
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  GetStatsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: getStats
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  # Lambda Integrations
  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameBackendLambda.Arn}/invocations

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameBackendLambda.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameBackendLambda.Arn}/invocations

  # Lambda Permissions
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GameBackendLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/POST/*

Outputs:
  WebSocketUri:
    Description: WebSocket API endpoint
    Value: !Sub wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/production
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref GameUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref GameUserPoolClient